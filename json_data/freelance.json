[
  {
    "id": "voucher-management-system",
    "title": "Full-Stack Voucher Management System with Stripe Integration",
    "short_description": "Developed a comprehensive voucher management platform with a React admin dashboard, Node.js backend, and integrated Stripe payments to automate sales and distribution.",
    "problem_statement": "The client required a centralized system to create, manage, sell, and track digital vouchers for their business. They needed a secure way for administrators to manage inventory, including bulk uploads, and a seamless, automated payment process for customers to purchase and receive vouchers.",
    "solution_delivered": "I engineered a full-stack solution featuring a React-based admin dashboard and a secure Node.js/Express.js backend with a MongoDB database. The system provides complete CRUD functionality for vouchers, secure admin authentication using JWT, and role-based access control. Key features include bulk voucher import via CSV and a customizable payment page. The project was delivered in two phases: first, the core management dashboard, and second, a full integration with the Stripe API to handle payment intents and automate the voucher dispensing process upon successful payment.",
    "key_achievements": [
      "Built a multi-tenant ready system where each admin receives a unique API key to securely dispense vouchers.",
      "Integrated the Stripe API to create a fully automated payment and voucher delivery workflow.",
      "Developed a bulk upload feature, allowing admins to import thousands of vouchers from a CSV file, saving significant manual effort.",
      "Designed and implemented a comprehensive RESTful API with clear documentation for all system functionalities."
    ],
    "technologies": [
      "React.js",
      "Node.js",
      "Express.js",
      "MongoDB",
      "Mongoose",
      "Stripe API",
      "RESTful API",
      "JWT",
      "JavaScript"
    ],
    "client_feedback": {
      "quote": "Hi, I have checked the video, looks good and functional.",
      "client_name": "rumaratetekirua, Food Delivery Service"
    },
    "media": [
      {
        "type": "video",
        "src": "https://res.cloudinary.com/dmiqkr7ja/video/upload/v1756670270/Freelance/bandicam_2024-08-09_02-38-45-377_y2g6zk.mp4",
        "caption": "Demo video showcasing the complete voucher management system and Stripe payment flow."
      }
    ]
  },
  {
    "id": "computer-vision-measurement",
    "title": "Automated Object Dimension Measurement using OpenCV",
    "short_description": "Developed a Python script using OpenCV to automatically detect cardboard objects in a video and measure their dimensions (length, width) and distance from a reference point in millimeters.",
    "problem_statement": "The client needed an automated method to accurately measure the physical dimensions of multiple cardboard objects shown in a video. Manual measurement was impractical and time-consuming. The required measurements included the length, width, and distance of each object from the video's starting point.",
    "solution_delivered": "I created a custom Python script leveraging the OpenCV library for computer vision tasks. The script processes the input video, identifies object contours using image processing techniques, and calculates the bounding box for each detected cardboard object. By using a known reference object for scale calibration, the script accurately converts pixel measurements into millimeters, providing the precise length, width, and positional data for each object as requested.",
    "key_achievements": [
      "Achieved high-precision measurements by implementing a robust calibration and object detection algorithm.",
      "Delivered a complete solution, including the Python source code and a demonstration video, ahead of schedule.",
      "The solution successfully handled multiple objects within the video frame, measuring each one individually.",
      "Received a 5-star rating and a significant tip for exceeding client expectations in quality and service."
    ],
    "technologies": [
      "Python",
      "OpenCV"
    ],
    "client_feedback": {
      "quote": "Brilliant programmer, completed my vision system project above my expectations and on time also. Qamar kept me updated throughout the process. Highly recommended, 10/10 for quality of work and service.",
      "client_name": "tonyc2000"
    },
    "media": [
      {
        "type": "video",
        "src": "https://res.cloudinary.com/dmiqkr7ja/video/upload/v1756670400/Freelance/bandicam_2024-09-06_04-27-23-399_zbnrws.mp4",
        "caption": "Live demonstration of the Python script analyzing a video to measure object dimensions in real-time."
      }
    ]
  },
  {
    "id": "custom-coloring-book-maker",
    "title": "Full-Stack Custom Coloring Book Generator",
    "short_description": "Developed a web application that converts images into printable color-by-number pages, featuring a custom designer, palette management, and multiple backend services.",
    "problem_statement": "Artists, educators, and hobbyists needed a flexible tool to create custom color-by-number puzzles from their own images or original designs. Existing solutions were either too simple, lacking customization, or required expensive desktop software.",
    "solution_delivered": "I built a feature-rich frontend using React and Tailwind CSS, offering two creation modes: 'Image Upload' and a 'Designer' for drawing on a grid. The application is powered by a polyglot microservices architecture. The core image processing and PDF generation is handled by a Python/Flask backend, using libraries like Pillow for image manipulation and Playwright for high-fidelity PDF creation. For robust user management, authentication (JWT), role-based access, and API key generation for 'Designer' roles, I developed a separate, high-performance backend service in Go (Golang) using the Gin framework and MongoDB. This architecture ensures scalability and separates concerns effectively.",
    "key_achievements": [
      "Created a dual-mode system allowing users to either upload existing images or design puzzles from scratch on a grid.",
      "Implemented extensive customization, including various pixel shapes (squares, triangles, hexagons), palette management, and multiple PDF/PNG export settings.",
      "Engineered a polyglot backend using Python/Flask for complex media processing and Go/Gin for scalable user management and authentication.",
      "Developed a robust PDF generation pipeline using Playwright and Jinja2 to create high-quality, printable coloring pages with optional color keys."
    ],
    "technologies": [
      "React",
      "Tailwind CSS",
      "Python",
      "Flask",
      "Pillow (PIL)",
      "Playwright",
      "Go (Golang)",
      "Gin-Gonic",
      "MongoDB",
      "REST API",
      "JWT",
      "SQLite"
    ],
    "client_feedback": {
      "quote": "Great Work Qamar. Long term partner.",
      "client_name": "Floris, Project Stakeholder"
    },
    "media": [
      {
        "type": "video",
        "src": "https://res.cloudinary.com/dmiqkr7ja/video/upload/v1756672896/Freelance/Recording_2025-09-01_013955_hdiqx5.mp4",
        "caption": "A comprehensive demo of the Coloring Book Maker, showing image upload, the designer grid, palette customization, and final PDF generation."
      }
    ]
  }
]