[
  {
    "id": "ask-sunnah-online",
    "title": "Ask Sunnah - AI Islamic Scholar",
    "project_type": "Personal Project",
    "status": "Live",
    "role": "Lead Full-Stack & AI Architect",
    "date_range": "May 2024 - Present",
    "short_description": "A full-stack AI application that provides users with referenced answers to Islamic questions by querying Hadith collections using a custom RAG pipeline.",
    "long_description": "Ask Sunnah is a complete, real-world application of Retrieval-Augmented Generation (RAG) designed to provide accurate, verifiable answers from Islamic Hadith collections. The project is architected as a robust three-part system:\n\n1.  **Data Pipeline:** A Python-based ETL process extracts Hadith data from a MySQL database, cleans it, generates vector embeddings using the OpenAI API, and indexes them into a Pinecone vector database. This prepares the foundational knowledge base for the AI.\n\n2.  **Backend API:** A secure and scalable backend built with Flask (Python) serves the core AI logic. It features API key authentication, rate limiting, and an admin panel for user management. When a query is received, it retrieves the most relevant Hadith from Pinecone and uses an LLM to generate a coherent answer, complete with source citations.\n\n3.  **Frontend Application:** A modern, responsive user interface built with Next.js and TypeScript provides a seamless conversational experience. Users can select specific Hadith collections to query, and each AI-generated answer is accompanied by the source texts, ensuring transparency and trust.",
    "key_features": [
      "AI-powered conversational Q&A",
      "Retrieval-Augmented Generation (RAG) pipeline for factual answers",
      "Verifiable sources with links to original Hadith texts",
      "Secure backend API with key-based authentication and rate limiting",
      "Comprehensive admin dashboard for user & API key management",
      "Dynamic multi-collection search (Bukhari, Muslim, etc.)",
      "Fully responsive and modern user interface"
    ],
    "key_challenges": [
      {
        "challenge": "Ensuring Factual Accuracy and Preventing AI Hallucination",
        "solution": "Implemented a strict RAG pipeline to ground the LLM's responses in retrieved scriptural texts. Meticulous prompt engineering was used to instruct the model to only use the provided context, minimizing false information and citing sources for every claim."
      },
      {
        "challenge": "Designing a Scalable and Maintainable System Architecture",
        "solution": "Decoupled the project into three distinct services: a Data Pipeline for ETL, a Backend API for core logic, and a Frontend Application for user interaction. This architecture ensures modularity, allowing for independent development, deployment, and scaling of each component."
      },
      {
        "challenge": "Processing and Indexing a Large Corpus of Hadith Texts",
        "solution": "Developed an automated data pipeline to extract data from a MySQL database, clean HTML content, generate high-dimensional embeddings, and efficiently index millions of vectors into Pinecone. The pipeline is designed to be runnable for specific collections, making data updates manageable."
      }
    ],
    "technologies": [
      "Python",
      "Flask",
      "Next.js",
      "TypeScript",
      "React",
      "RAG",
      "OpenAI API",
      "Pinecone",
      "SQLite",
      "MySQL",
      "Tailwind CSS",
      "JWT",
      "Gunicorn",
      "Vercel",
      "Git"
    ],
    "links": [
      {
        "type": "Live Demo",
        "url": "http://asksunnah.online/",
        "icon": "fas fa-external-link-alt"
      },
      {
        "type": "Backend GitHub (Private)",
        "url": "https://github.com/Qamar2315/ask-sunnah-api",
        "icon": "fab fa-github"
      },
      {
        "type": "Frontend GitHub (Private)",
        "url": "https://github.com/Qamar2315/ask-sunnah-frontend",
        "icon": "fab fa-github"
      },
      {
        "type": "Data Pipeline GitHub (Private)",
        "url": "https://github.com/Qamar2315/ask-sunnah-data-pipeline",
        "icon": "fab fa-github"
      }
    ],
    "media": [
      {
        "type": "video",
        "src": "https://res.cloudinary.com/dmiqkr7ja/video/upload/v1755446262/Ask%20Sunnah/Vento_-_4_August_2025_vb74kj.mp4",
        "caption": "Project Demo Video"
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755446248/Ask%20Sunnah/WhatsApp_Image_2025-08-06_at_1.44.59_AM_2_pzej6p.jpg",
        "caption": "User interface showing a query and response"
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755446246/Ask%20Sunnah/WhatsApp_Image_2025-08-06_at_1.44.59_AM_1_xmvmqj.jpg",
        "caption": "Example of AI-generated answer with sources"
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755446241/Ask%20Sunnah/WhatsApp_Image_2025-08-06_at_1.45.01_AM_1_gbarev.jpg",
        "caption": "Selecting specific Hadith collections for search"
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755446237/Ask%20Sunnah/WhatsApp_Image_2025-08-06_at_1.44.59_AM_lld1m9.jpg",
        "caption": "Mobile responsive view of the chat interface"
      }
    ]
  },
  {
    "id": "learnxcellence",
    "title": "LearnXcellence",
    "short_description": "Final Year Project to automate university processes, featuring AI-proctoring, auto quiz generation, and spoof detection with a custom YOLO model.",
    "long_description": "This comprehensive platform was my final year project, aimed at modernizing university management. The backend was a robust Node.js application, while the frontend used Angular. The AI components were the core of the project:\n\n*   **AI Proctoring:** Utilized OpenCV and facial landmark detection to monitor students during exams for signs of cheating.\n*   **Spoof Detection:** Trained a custom YOLOv7 model to differentiate between a live person and a photo/video, preventing identity fraud.\n*   **Quiz Generation:** Integrated with NLP models to automatically generate multiple-choice questions from lecture notes or textbooks.",
    "technologies": [
      "Node.js",
      "Angular",
      "Python",
      "OpenCV",
      "YOLOv7",
      "TensorFlow",
      "MongoDB"
    ],
    "links": [
      {
        "type": "GitHub",
        "url": "https://github.com/Qamar2315/LearnXcellence",
        "icon": "fab fa-github"
      },
      {
        "type": "Case Study",
        "url": "#",
        "icon": "fas fa-file-alt"
      }
    ],
    "media": [
      {
        "type": "image",
        "src": "pic.png",
        "caption": "The main admin dashboard."
      },
      {
        "type": "image",
        "src": "dev.png",
        "caption": "AI proctoring preview."
      }
    ]
  },
  {
    "id": "slack-prayer-reminder-bot",
    "title": "Slack Prayer Reminder Bot",
    "project_type": "Personal Project",
    "status": "Completed",
    "role": "Creator & Lead Developer",
    "date_range": "July 2024 - August 2024",
    "short_description": "A production-ready bot that sends beautiful, motivational reminders to Slack channels with Quran verses and AI-generated messages.",
    "long_description": "This is a robust, automated bot designed to enrich a Slack workspace with timely and inspiring prayer reminders. The application runs on a continuous schedule, performing two key jobs:\n\n1.  **Daily Setup:** Each morning, the bot fetches the day's prayer times from the AlAdhan API for a specific location. It then uses the Google Gemini AI to generate a unique, motivational message for each of the five prayers and stores this data in a local SQLite database.\n\n2.  **Reminder Dispatch:** Every minute, the bot checks the database for upcoming prayers. When a prayer is due (e.g., 10 minutes beforehand), it pairs the AI-generated message with a randomly selected Quran verse (in both Arabic and Urdu) and sends a beautifully formatted, multi-section message to the designated Slack channel. This ensures that reminders are not only punctual but also fresh and engaging every day.",
    "key_features": [
      "Automated, scheduled prayer reminders for Slack",
      "Unique AI-generated motivational messages via Google Gemini",
      "Integrated Quran verses with Arabic and Urdu text",
      "Richly formatted, visually appealing Slack messages",
      "SQLite persistence to prevent duplicate reminders and ensure reliability",
      "Secure configuration using environment variables for API keys",
      "Configurable for any location and prayer calculation method"
    ],
    "key_challenges": [
      {
        "challenge": "Ensuring Reliability and Punctuality",
        "solution": "Architected the bot with a two-part scheduling system. A daily job pre-fetches and stores all necessary data (prayer times, AI messages) in an SQLite database. A separate, frequent job then only checks the local database. This decouples the bot from real-time API dependencies, making it resilient to network failures and ensuring reminders are always sent on time."
      },
      {
        "challenge": "Creating Engaging and Non-Repetitive Content",
        "solution": "To avoid message fatigue, I integrated Google's Gemini AI to generate a fresh, context-aware motivational message for each prayer, every single day. This was combined with a system that randomly selects from a large corpus of Quran verses, guaranteeing that the content remains inspiring and varied."
      }
    ],
    "technologies": [
      "Python",
      "Google Gemini API",
      "Slack API",
      "AlAdhan API",
      "SQLite",
      "APScheduler",
      "Requests",
      "python-dotenv"
    ],
    "links": [
      {
        "type": "Video Demo",
        "url": "https://res.cloudinary.com/dmiqkr7ja/video/upload/v1755448651/Slack%20Prayer%20Reminder/2_naigex.mp4",
        "icon": "fas fa-video"
      },
      {
        "type": "GitHub",
        "url": "https://github.com/Qamar2315/slack-prayer-reminder",
        "icon": "fab fa-github"
      }
    ],
    "media": [
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755448640/Slack%20Prayer%20Reminder/7.898Z_gzcqbp.png",
        "caption": "Example Fajr prayer reminder in Slack"
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755448641/Slack%20Prayer%20Reminder/9.342Z_ltu6oy.png",
        "caption": "Isha prayer notification with Quran verse"
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755448639/Slack%20Prayer%20Reminder/6.547Z_carm16.png",
        "caption": "A motivational message for Maghrib prayer"
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755448636/Slack%20Prayer%20Reminder/1_nkr1nn.png",
        "caption": "Overview of the project's file structure"
      }
    ]
  },
  {
    "id": "sweettales-chat-pdf-creator",
    "title": "SweetTales - Chat to PDF Memory Book",
    "project_type": "Personal Project",
    "status": "Completed",
    "role": "Creator & Full-Stack Developer",
    "date_range": "August 2024",
    "short_description": "A web application that transforms WhatsApp chat exports into beautifully themed, printable PDF memory books, with optional AI-powered highlights.",
    "long_description": "SweetTales is a Flask-based web application created to turn digital conversations into tangible keepsakes. The user journey is simple: upload a standard WhatsApp chat export (.txt file), choose from a selection of visual themes, and add a custom title and name. \n\nThe backend then performs a multi-step process: \n1. **Parsing:** It intelligently parses the unstructured text file, identifying senders, timestamps, messages, and filtering out system notifications (e.g., 'user was added'). \n2. **HTML Generation:** The parsed data is dynamically rendered into a styled HTML document using a Jinja2 template corresponding to the user's chosen theme. \n3. **AI Highlights (Optional):** If an API key is provided, the entire chat transcript is sent to the Google Gemini API to generate a summary of key moments, which is added as a special 'Highlights' section in the book. \n4. **PDF Conversion:** The application uses Playwright's headless browser engine to convert the final HTML into a high-fidelity, print-ready PDF, perfectly preserving the theme's styling and layout.",
    "key_features": [
      "Parses standard WhatsApp chat export (.txt) files",
      "Multiple customizable themes for PDF styling",
      "High-quality, print-ready PDF generation via Playwright",
      "Optional AI-powered conversation highlights using Google Gemini",
      "Simple and intuitive web interface for upload and customization",
      "Asynchronous PDF generation to prevent request timeouts on large chats",
      "Modular code structure for easy maintenance and theme additions"
    ],
    "key_challenges": [
      {
        "challenge": "Reliably Parsing Unstructured WhatsApp Chat Data",
        "solution": "Developed a robust chat parser using regular expressions to accurately handle various message formats, including multi-line messages, different timestamp patterns (12h/24h), and special characters. The parser was designed to effectively filter out non-message system entries to create a clean conversation log."
      },
      {
        "challenge": "Generating High-Fidelity PDFs with Complex CSS",
        "solution": "Standard PDF libraries struggled to render modern CSS themes accurately. I chose to integrate Playwright, a headless browser automation tool, to render the chat into an HTML page first and then 'print' it to PDF. This ensures that any theme, no matter how complex its CSS, is rendered with perfect fidelity, exactly as it would appear in a Chrome browser."
      }
    ],
    "technologies": [
      "Python",
      "Flask",
      "Playwright",
      "Google Gemini API",
      "HTML5",
      "CSS3",
      "Jinja2",
      "JavaScript (Async)",
      "python-dotenv"
    ],
    "links": [
      {
        "type": "Video Demo",
        "url": "https://res.cloudinary.com/dmiqkr7ja/video/upload/v1755463068/Sweet%20Tales/demo_qhkkq9.mp4",
        "icon": "fas fa-video"
      },
      {
        "type": "GitHub (Private)",
        "url": "https://github.com/Qamar2315/SweetTales",
        "icon": "fab fa-github"
      }
    ],
    "media": [
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755463040/Sweet%20Tales/91_rsnbr5.png",
        "caption": "The main application UI for file upload and customization."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755463039/Sweet%20Tales/1_bvmpqz.png",
        "caption": "The professional landing page for the SweetTales application."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755463036/Sweet%20Tales/2_oo4kvi.png",
        "caption": "Example of a generated PDF cover page."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755463031/Sweet%20Tales/7_luhuyq.png",
        "caption": "An inside page of the generated PDF showing the chat layout."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755463030/Sweet%20Tales/9_xlcfrp.png",
        "caption": "Another example of the PDF output with a different theme."
      }
    ]
  },
  {
    "id": "ask-quran-rag",
    "title": "AskQuran - AI Quranic Scholar",
    "project_type": "Personal Project",
    "status": "Completed",
    "role": "Lead Full-Stack & AI Architect",
    "date_range": "August 2024",
    "short_description": "A beautiful, modern web application for asking questions about the Quran and receiving AI-powered responses with relevant verses using a RAG architecture.",
    "long_description": "AskQuran is an end-to-end AI application designed to make Quranic knowledge accessible through a natural language interface. The system is built on a decoupled, three-part architecture to ensure scalability and maintainability:\n\n1.  **Data Pipeline:** A Python-based ETL pipeline processes raw Quranic text and its metadata. It uses Google's Gemini models to generate high-quality vector embeddings for each verse and then indexes this data into a Pinecone serverless vector database, creating the core knowledge base.\n\n2.  **Backend API:** A stateless Flask API serves as the brain of the application. It employs a sophisticated RAG workflow: upon receiving a query, it first classifies whether the question is Quran-related or conversational. For Quranic questions, it generates an embedding, retrieves the most relevant verses from Pinecone, and then uses Gemini's powerful generative model to synthesize a final, source-backed answer. \n\n3.  **Frontend Application:** Built with Next.js and TypeScript, the frontend offers a visually stunning and responsive user experience. It features an elegant, Islamic-themed design where users can interact with the AI in real-time. Each generated answer is displayed alongside the retrieved verses, complete with links to Quran.com for verification and further study.",
    "key_features": [
      "AI-powered Quranic Q&A with conversational interface",
      "Retrieval-Augmented Generation (RAG) for factual, source-based answers",
      "Smart query classification to handle both topical questions and small talk",
      "Verifiable source verses displayed with each answer, linking to Quran.com",
      "Elegant, responsive, and mobile-friendly UI with Islamic design elements",
      "Built on a modern stack including Next.js, Google Gemini, and Pinecone",
      "Modular three-part architecture (Data Pipeline, API, Frontend)"
    ],
    "key_challenges": [
      {
        "challenge": "Achieving Factual Accuracy and Contextual Relevance",
        "solution": "The RAG architecture was chosen specifically to mitigate AI hallucinations. By first retrieving relevant Quranic verses from a Pinecone vector database, the generative model is provided with a factual, grounded context. The prompt is engineered to compel the AI to construct its answer solely based on these provided verses, ensuring accuracy."
      },
      {
        "challenge": "Differentiating Between Quranic Questions and Small Talk",
        "solution": "To create a more natural user experience, I implemented a classification layer in the API. Before performing a vector search, the user's query is first sent to a Gemini model with a prompt that asks it to categorize the input as either 'quran_question' or 'conversational'. This allows the API to provide a direct, friendly response for small talk without unnecessarily querying the database."
      }
    ],
    "technologies": [
      "Python",
      "Flask",
      "Next.js",
      "TypeScript",
      "React",
      "Google Gemini API",
      "Pinecone",
      "LangChain",
      "Tailwind CSS",
      "Radix UI"
    ],
    "links": [
      {
        "type": "Video Demo",
        "url": "https://res.cloudinary.com/dmiqkr7ja/video/upload/v1755464910/Ask%20Quran/demo_omv2ll.mp4",
        "icon": "fas fa-video"
      },
      {
        "type": "Backend GitHub (Private)",
        "url": "https://github.com/Qamar2315/ask-quran-api",
        "icon": "fab fa-github"
      },
      {
        "type": "Frontend GitHub (Private)",
        "url": "https://github.com/Qamar2315/ask-quran-frontend",
        "icon": "fab fa-github"
      },
      {
        "type": "Data Pipeline GitHub (Private)",
        "url": "https://github.com/Qamar2315/ask-quran-data-pipeline",
        "icon": "fab fa-github"
      }
    ],
    "media": [
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755464881/Ask%20Quran/5_diwcbc.png",
        "caption": "Main user interface showing an AI-generated answer with source verses."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755464879/Ask%20Quran/1_fdfp4b.png",
        "caption": "The clean and inviting chat interface."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755464877/Ask%20Quran/2_p8dflt.png",
        "caption": "Display of retrieved Quranic verses that support the AI's answer."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755464875/Ask%20Quran/4_lchzsy.png",
        "caption": "Responsive design for mobile devices."
      }
    ]
  },
  {
    "id": "learnxcellence-lms",
    "title": "LearnXcellence: AI-Powered E-Learning & Proctoring Platform",
    "project_type": "Academic Project (Final Year)",
    "status": "Completed",
    "role": "Co-creator & Full-Stack/AI Developer",
    "date_range": "Sep 2023 - May 2024",
    "short_description": "A full-stack e-learning platform featuring custom-trained AI models for intelligent proctoring, AI-assisted content generation, and biometric identity verification.",
    "long_description": "LearnXcellence is a sophisticated e-learning platform built from the ground up to address the needs of modern education, with a strong focus on academic integrity. The platform is built on a decoupled, three-tier architecture: a React.js frontend for a dynamic user experience, a Node.js/Express backend for core business logic and API services, and a dedicated Python/Flask microservice for handling all intensive AI/ML operations. \n\nFor instructors, it offers a full suite of course management tools, including AI-powered quiz and project idea generation. The standout feature is the intelligent proctoring system, which analyzes a student's webcam feed in real-time for violations like phone usage, multiple people, and gaze deviation. \n\nFor students, the platform provides a secure and engaging learning environment. A key innovation is the use of a custom-trained AI model for facial liveness detection during registration and quiz initiation, preventing identity spoofing with photos or screens. The system culminates in generating a data-backed 'cheating probability' score, providing instructors with actionable insights and detailed reports.",
    "key_features": [
      "Advanced AI Proctoring with custom-trained models (phone, gaze, multi-person detection)",
      "AI-Based Liveness & Anti-Spoof Detection for secure identity verification",
      "AI Content Generation for quizzes, project suggestions, and viva questions",
      "Decoupled Microservice Architecture (React, Node.js, Python/Flask)",
      "Distinct Role-Based Dashboards for Instructors and Students",
      "Comprehensive Course & User Management functionalities",
      "Automated Grading with manual override and detailed PDF reporting",
      "Secure user authentication with facial biometrics and JWT"
    ],
    "key_challenges": [
      {
        "challenge": "Ensuring Robust Academic Integrity in Online Exams",
        "solution": "Developed a multi-faceted AI proctoring system. This involved training separate YOLOv8 models for mobile phone and multi-person detection, and integrating MediaPipe for gaze and mouth movement analysis. The data from these analyses was fed into a custom-trained Scikit-learn classifier to generate a nuanced cheating probability score, moving beyond simple rule-based flags."
      },
      {
        "challenge": "Preventing Identity Spoofing during Registration and Exams",
        "solution": "Instead of relying on basic face recognition, I trained a custom YOLOv8 model specifically for liveness detection. This model was trained on a proprietary dataset of real faces vs. spoofing attempts (e.g., photos on screens, printed images), allowing the system to reliably verify that a real, live person is in front of the camera."
      },
      {
        "challenge": "Architecting a Scalable System for Intensive AI Tasks",
        "solution": "Designed a microservice architecture to separate the main application logic (Node.js) from the computationally heavy AI processing (Python/Flask). This prevents AI tasks like image analysis from blocking the user interface, ensures independent scalability of the services, and allows for using the best technology for each specific job."
      }
    ],
    "technologies": [
      "React.js",
      "Node.js",
      "Express.js",
      "Python",
      "Flask",
      "MongoDB",
      "YOLOv8",
      "MediaPipe",
      "Scikit-learn",
      "OpenCV",
      "face_recognition",
      "JWT",
      "Tailwind CSS",
      "Mongoose",
      "Axios"
    ],
    "links": [
      {
        "type": "Video Demo",
        "url": "https://youtu.be/TXzUpTni7DI?si=NSW2EHPbLJ264JKa",
        "icon": "fas fa-video"
      },
      {
        "type": "GitHub (Private)",
        "url": "https://github.com/qamar2315/learnxcellence",
        "icon": "fab fa-github"
      }
    ],
    "media": [
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755547801/Learnxcellence/4_yuy75t.png",
        "caption": "Instructor's dashboard for managing courses and students."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755547802/Learnxcellence/9_wylrao.png",
        "caption": "Detailed AI Proctoring report with cheating probability and violation evidence."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755547801/Learnxcellence/6_cegck3.png",
        "caption": "Student's dashboard showing enrolled courses."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755547801/Learnxcellence/1_x5dqzt.png",
        "caption": "The landing page for the LearnXcellence platform."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755547801/Learnxcellence/8_bdlvds.png",
        "caption": "The student's view of an ongoing proctored quiz."
      },
      {
        "type": "image",
        "src": "https://res.cloudinary.com/dmiqkr7ja/image/upload/v1755547802/Learnxcellence/3_zfdljw.png",
        "caption": "Secure login page for students and instructors."
      }
    ]
  }
]